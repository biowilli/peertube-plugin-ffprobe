var script=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n({registerHook:e,peertubeHelpers:t}){e({target:"action:video-watch.player.loaded",handler:({video:e})=>{console.log(e),console.log(e.id),fetch(t.getBaseRouterRoute()+"/ffprobe/"+e.id,{method:"GET",headers:t.getAuthHeader()}).then(e=>e.json()).then(e=>function e(t,r=0){for(const n in t)"object"==typeof t[n]?(console.log("  ".repeat(r)+n+":"),o("  ".repeat(r)+n+":",r),e(t[n],r+1)):(console.log("  ".repeat(r)+n,t[n]),i("  ".repeat(r)+n,t[n]))}(e.data.result))}})}function o(e,t){const r=document.querySelector("my-video-attributes"),n=document.createElement("div");n.classList.add("header-field"),n.innerHTML=`\n    <h${t} class="header-label">${e}</h${t}>\n  `,r.appendChild(n)}function i(e,t){const r=document.querySelector("my-video-attributes"),n=document.createElement("div");n.classList.add("attribute-ffprobe"),n.innerHTML=`\n<span class="attribute-label-ffprobe">${e}</span>\n<span class="attribute-value-ffprobe">${t}</span>\n`,r.appendChild(n)}r.r(t),r.d(t,"register",(function(){return n}))}]);void 0===script&&console.error("esm-webpack-plugin: nothing exported!");const _script$register=script.register;export{_script$register as register};